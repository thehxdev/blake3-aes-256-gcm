/*
 * blake3-aes-256-gcm algorithm implementation
 */

#include <assert.h>
#include <string.h>
#include <blake3.h>

#include <wolfssl/options.h>
#include <wolfssl/wolfcrypt/types.h>
#include <wolfssl/wolfcrypt/random.h>
#include <wolfssl/wolfcrypt/aes.h>

#include "blake3aes256gcm.h"

#define BLAKE3_DERIVE_KEY_CONTEXT "blake3aes256gcm @RAND_STRING@ @DATE@"

static void blake3aes256gcm_inc_iv(byte *iv) {
#if defined(LITTLE_ENDIAN_ORDER)
    word64 *low = (word64*)iv;
    word32 *high = (word32*)&iv[sizeof(*low)];
#else
    word32 *high = (word32*)iv;
    word64 *low = (word64*)&iv[sizeof(*high)];
#endif
    *low += 1;
    if (*low == 0)
        *high += 1;
}

int blake3aes256gcm_zero_iv(byte *iv_out) {
    memset(iv_out, 0, AES256_IV_SIZE);
    return 0;
}

int blake3aes256gcm_gen_derived_key(const byte *key, const byte *salt, byte *derived_key_out) {
    blake3_hasher hasher;
    memset(&hasher, 0, sizeof(hasher));

    blake3_hasher_init_derive_key(&hasher, BLAKE3_DERIVE_KEY_CONTEXT);
    blake3_hasher_update(&hasher, key, AES256_KEY_SIZE);
    blake3_hasher_update(&hasher, salt, AES256_SALT_SIZE);
    blake3_hasher_finalize(&hasher, derived_key_out, BLAKE3_OUT_LEN);

    return 0;
}

int blake3aes256gcm_init(Blake3Aes256Gcm_t *self, const byte *key, const byte *salt) {
    int err;

    blake3aes256gcm_gen_derived_key(key, salt, self->derived_key);

    err = wc_AesInit(&self->aes, NULL, INVALID_DEVID);
    assert(err == 0 && "wc_AesInit failed");

    err = wc_AesGcmSetKey(&self->aes, self->derived_key, sizeof(self->derived_key));
    assert(err == 0 && "wc_AesGcmSetKey failed");

    blake3aes256gcm_zero_iv(self->iv);
    return err;
}

void blake3aes256gcm_encrypt(Blake3Aes256Gcm_t *self, byte *out,
                             const byte *in, size_t in_size,
                             byte *out_iv, byte *auth_tag,
                             const byte *auth_in, size_t auth_in_size)
{
    wc_AesGcmEncrypt(&self->aes, out, in, in_size,
                     self->iv, AES256_IV_SIZE,
                     auth_tag, AES256_AUTH_TAG_SIZE, auth_in, auth_in_size);
    memmove(out_iv, self->iv, AES256_IV_SIZE);
    blake3aes256gcm_inc_iv(self->iv);
}

int blake3aes256gcm_decrypt(Blake3Aes256Gcm_t *self, byte *out,
                            const byte *in, size_t in_size,
                            const byte *iv, const byte *auth_tag,
                            const byte *auth_in, size_t auth_in_size)
{
    int err = wc_AesGcmDecrypt(&self->aes, out, in, in_size,
                               iv, AES256_IV_SIZE,
                               auth_tag, AES256_AUTH_TAG_SIZE,
                               auth_in, auth_in_size);
    blake3aes256gcm_inc_iv(self->iv);
    return err;
}

void blake3aes256gcm_destroy(Blake3Aes256Gcm_t *self) {
    wc_AesFree(&self->aes);
    memset(self->iv, 0, sizeof(self->iv));
    memset(self->derived_key, 0, sizeof(self->derived_key));
}
